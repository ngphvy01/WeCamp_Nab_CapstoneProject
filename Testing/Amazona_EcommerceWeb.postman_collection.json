{
	"info": {
		"_postman_id": "ed0d61b3-d72b-404d-8cf7-75d5cef1073b",
		"name": "Amazona_EcommerceWeb",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27047724"
	},
	"item": [
		{
			"name": "Happy",
			"item": [
				{
					"name": "API Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}"
					},
					"response": []
				},
				{
					"name": "Get all product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\":\r",
									"            {\r",
									"                \"_id\": {\r",
									"                    \"type\": \"string\",\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"slug\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"image\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"images\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"brand\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"category\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"description\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"price\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"countInStock\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"rating\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"numReviews\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"reviews\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"            }\r",
									"        },\r",
									"    ]\r",
									"    \r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"totalProduct\", response.length);\r",
									"pm.collectionVariables.set(\"productID\", response[0]._id);\r",
									"pm.collectionVariables.set(\"productName\", response[0].slug);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/products"
					},
					"response": []
				},
				{
					"name": "Search product with no filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":\r",
									"    {\r",
									"        \"products\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"_id\": {\r",
									"                        \"type\": \"string\",\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"slug\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"image\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"images\": {\r",
									"                        \"type\": \"array\"\r",
									"                    },\r",
									"                    \"brand\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"category\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"price\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"countInStock\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"rating\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"numReviews\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"reviews\": {\r",
									"                        \"type\": \"array\"\r",
									"                    },\r",
									"                    \"__v\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"createdAt\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"updatedAt\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"countProducts\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"page\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"pages\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate product count\", ()=> {\r",
									"    pm.expect(response.countProducts).to.eql(parseInt(pm.collectionVariables.get(\"totalProduct\")));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/products/search"
					},
					"response": []
				},
				{
					"name": "Filter product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const currentPage = pm.collectionVariables.get(\"currentPage\")\r",
									"const response = pm.response.json()\r",
									"console.log(currentPage)\r",
									"\r",
									"if (parseInt(currentPage) < parseInt(response.pages)) {\r",
									"    postman.setNextRequest(\"Filter product\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"Get product detail by id\");\r",
									"}\r",
									"\r",
									"let product = response.products.filter(p => p.category === \"Shirts\");\r",
									"product = product.filter(p => p.price <=200 && p.price>=50);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Filter correctly\",()=>{\r",
									"    pm.expect(product.length).to.eql(parseInt(response.products.length))\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let currentPage = pm.collectionVariables.get(\"currentPage\")\r",
									"pm.collectionVariables.set(\"currentPage\", parseInt(currentPage)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/search?page={{currentPage}}&category=Shirts&price=50-200&rating=all&order=newest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"search"
							],
							"query": [
								{
									"key": "page",
									"value": "{{currentPage}}"
								},
								{
									"key": "category",
									"value": "Shirts"
								},
								{
									"key": "price",
									"value": "50-200"
								},
								{
									"key": "rating",
									"value": "all"
								},
								{
									"key": "order",
									"value": "newest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product detail by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\":\r",
									"            {\r",
									"                \"_id\": {\r",
									"                    \"type\": \"string\",\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"slug\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"image\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"images\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"brand\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"category\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"description\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"price\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"countInStock\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"rating\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"numReviews\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"reviews\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"            }\r",
									"    \r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get required product ID\",function(){\r",
									"    pm.expect(response._id).to.eql(pm.collectionVariables.get(\"productID\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{productID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product detail by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":\r",
									"    {\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"slug\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"image\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"images\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"brand\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"category\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"price\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"countInStock\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"rating\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"numReviews\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"reviews\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"    }\r",
									"\r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get required product Name\", function () {\r",
									"    pm.expect(response.slug).to.eql(pm.collectionVariables.get(\"productName\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/slug/:slug",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"slug",
								":slug"
							],
							"variable": [
								{
									"key": "slug",
									"value": "{{productName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"isAdmin\": {\r",
									"            \"type\": \"boolean\",\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"const response = pm.response.json()\r",
									"\r",
									"// console.log(pm.collectionVariables.get(\"userEmail\"))\r",
									"pm.test(\"Email is signup email\", () => {\r",
									"    pm.expect(response.email).to.eql(pm.collectionVariables.get(\"userEmail\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"userEmail\", pm.collectionVariables.replaceIn('{{$randomEmail}}'));\r",
									"pm.collectionVariables.set(\"userPassword\", pm.collectionVariables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFirstName}}\",\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/signup"
					},
					"response": []
				},
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"isAdmin\": {\r",
									"            \"type\": \"boolean\",\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"const response =  pm.response.json()\r",
									"pm.collectionVariables.set(\"userToken\", response.token);\r",
									"pm.collectionVariables.set(\"userID\", response._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/signin"
					},
					"response": []
				},
				{
					"name": "Place Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Order is created\", function () {\r",
									"    pm.expect(response.message).to.eql(\"New Order Created\")\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"orderID\",response.order._id)\r",
									"pm.collectionVariables.set(\"currentPage\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 3,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/orders"
					},
					"response": []
				},
				{
					"name": "Get Order history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\":\r",
									"            {\r",
									"                \"shippingAddress\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\":\r",
									"                    {\r",
									"                        \"fullName\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"address\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"city\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"postalCode\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"country\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    }\r",
									"                },\r",
									"                \"_id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"orderItems\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"paymentMethod\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"itemsPrice\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"shippingPrice\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"taxPrice\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"totalPrice\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"user\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"isPaid\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"isDelivered\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/orders/mine"
					},
					"response": []
				},
				{
					"name": "Get Order detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":\r",
									"    {\r",
									"        \"shippingAddress\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\":\r",
									"            {\r",
									"                \"fullName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"address\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"city\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"postalCode\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"country\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"            }\r",
									"        },\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"orderItems\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\":\r",
									"                {\r",
									"                    \"slug\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"quantity\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"image\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"price\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"product\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"_id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                },\r",
									"            }\r",
									"        },\r",
									"        \"paymentMethod\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"itemsPrice\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"shippingPrice\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"taxPrice\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"totalPrice\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"isPaid\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isDelivered\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get required order ID\", function () {\r",
									"    pm.expect(response._id).to.eql(pm.collectionVariables.get(\"orderID\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Review is created\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Review Created\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"vy\",\r\n    \"rating\": 4,\r\n    \"comment\": \"nice\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/:productId/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								":productId",
								"reviews"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forget password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"resetPassToken\",response.message)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/forget-password"
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"userPassword\", pm.collectionVariables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const response =  pm.response.json()\r",
									"\r",
									"pm.test(\"Password is reseted\", ()=>{\r",
									"    pm.expect(response.message).to.eql(\"Password reseted successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"{{userPassword}}\",\r\n    \"token\":\"{{resetPassToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/reset-password"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"isAdmin\": {\r",
									"            \"type\": \"boolean\",\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"// const response =  pm.response.json()\r",
									"// pm.collectionVariables.set(\"userToken\", response.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFirstName}}\",\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/profile"
					},
					"response": []
				},
				{
					"name": "Update Profile - Missing body fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"_id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"isAdmin\": {\r",
									"            \"type\": \"boolean\",\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"// const response =  pm.response.json()\r",
									"// pm.collectionVariables.set(\"userToken\", response.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"VY\",\r\n    \"email\":\"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/profile"
					},
					"response": []
				},
				{
					"name": "Review product - Already reviewed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Review is created\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Review Created\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{userToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"vy\",\r\n    \"rating\": 4,\r\n    \"comment\": \"nice\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/:productId/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								":productId",
								"reviews"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unhappy",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "SignUp - Invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not signup\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Missing information\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"\",\r\n    \"email\":\"\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signup"
							},
							"response": []
						},
						{
							"name": "SignUp - Missing body fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"vy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signup"
							},
							"response": []
						},
						{
							"name": "SignUp - Existed email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not signup\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Account existed\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"vy\",\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signup"
							},
							"response": []
						},
						{
							"name": "SignIn - Invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not signin\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid email or password\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{$randomFirstName}}gmail.com\",\r\n    \"password\":\"Vy1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signin"
							},
							"response": []
						},
						{
							"name": "SignIn - Missing body fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not signin\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Missing Information\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"ngphvy02@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signin"
							},
							"response": []
						},
						{
							"name": "SignIn - Non-existed account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not signin\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid email or password\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/signin"
							},
							"response": []
						},
						{
							"name": "Forget Password - Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"User not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/forget-password"
							},
							"response": []
						},
						{
							"name": "Reset Password - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"token\":\"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/reset-password"
							},
							"response": []
						},
						{
							"name": "Reset Password - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/reset-password"
							},
							"response": []
						},
						{
							"name": "Update Profile - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"VY\",\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/profile"
							},
							"response": []
						},
						{
							"name": "Update Profile - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "123"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"VY\",\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/profile"
							},
							"response": []
						},
						{
							"name": "Update Profile - Invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not reset password\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Email\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NTY2YWVmOWE5OTIzMGY0OTczNmVlZWYiLCJuYW1lIjoiVlkiLCJlbWFpbCI6Im5ncGh2eTAyQGdtYWlsLmNvbSIsImlzQWRtaW4iOmZhbHNlLCJpYXQiOjE3MDEyMzA5ODMsImV4cCI6MTcwMzgyMjk4M30.778T1FsYlyCXMwcnfGKUj-hwnbLS0A83aHUXvYawUi8"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"VY\",\r\n    \"email\":\"ngmail.com\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/profile"
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Filter product - unavailable category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":\r",
											"    {\r",
											"        \"products\": {\r",
											"            \"type\": \"array\",\r",
											"        },\r",
											"        \"countProducts\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"page\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"pages\": {\r",
											"            \"type\": \"integer\"\r",
											"        }\r",
											"    }\r",
											"};\r",
											"pm.test(\"Validate schema\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate response body\", () => {\r",
											"    pm.expect(response.countProducts).to.eql(0);\r",
											"    pm.expect(response.products.length).to.eql(0);\r",
											"    pm.expect(response.pages).to.eql(0);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/products/search?category=T-Shirts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										"search"
									],
									"query": [
										{
											"key": "category",
											"value": "T-Shirts"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product detail by name  - Invalid Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Product Not Found\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Product Not Found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/products/slug/:slug",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										"slug",
										":slug"
									],
									"variable": [
										{
											"key": "slug",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review product - Invalid Product ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Product Not Found\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Product Not Found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"vy\",\r\n    \"rating\": 4,\r\n    \"comment\": \"nice\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/products/:productId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										":productId",
										"reviews"
									],
									"variable": [
										{
											"key": "productId",
											"value": "65617973061526173a2d89f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review product - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"No Token\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"vy\",\r\n    \"rating\": 4,\r\n    \"comment\": \"nice\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/products/:productId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										":productId",
										"reviews"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{productID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review product - Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/products/:productId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										":productId",
										"reviews"
									],
									"variable": [
										{
											"key": "productId",
											"value": "65617973061526173a2d89f1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Get Order detail - Missing OrderID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order detail - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Invalid Authentication\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "6561ed41cffdd36b14aaea99"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order detail - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Invalid Authentication\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "123"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order detail - Invalid OrderID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Order Not Found\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Order Not Found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order history - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Invalid Authentication\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/orders/mine"
							},
							"response": []
						},
						{
							"name": "Get Order history - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Invalid Authentication\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "123"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/orders/mine"
							},
							"response": []
						},
						{
							"name": "Place Order - Missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not place order\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 3,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"65618a21258b171c6731cfad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						},
						{
							"name": "Place Order - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not place order\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "123"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 3,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"65618a21258b171c6731cfad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						},
						{
							"name": "Place Order - Empty orderItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not place order\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Empty order\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						},
						{
							"name": "Place Order - Out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not place order\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Out of stock\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 100,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"65618a21258b171c6731cfad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						},
						{
							"name": "Place Order - Empty shipping and payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Can not place order\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Missing information\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 3,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"\",\r\n    \"address\": \"\",\r\n    \"city\": \"\",\r\n    \"postalCode\": \"\",\r\n    \"country\": \"\"\r\n  },\r\n  \"paymentMethod\": \"\",\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"65618a21258b171c6731cfad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						},
						{
							"name": "Place Order - Missing shipping address and payment method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItems\": [\r\n    {\r\n      \"slug\": \"nike-slim-pant\",\r\n      \"name\": \"Nike Slim Pant\",\r\n      \"quantity\": 3,\r\n      \"image\": \"/images/p3.jpg\",\r\n      \"price\": 25,\r\n      \"product\": \"65617973061526173a2d89ee\",\r\n      \"_id\": \"65617973061526173a2d89ee\"\r\n    },\r\n    {\r\n      \"slug\": \"adidas-fit-pant\",\r\n      \"name\": \"Adidas Fit Pant\",\r\n      \"quantity\": 1,\r\n      \"image\": \"/images/p4.jpg\",\r\n      \"price\": 65,\r\n      \"product\": \"65617973061526173a2d89ef\",\r\n      \"_id\": \"65617973061526173a2d89ef\"\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"fullName\": \"Vy\",\r\n    \"address\": \"123 BVD\",\r\n    \"city\": \"hcm\",\r\n    \"postalCode\": \"123\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"itemsPrice\": 140,\r\n  \"shippingPrice\": 0,\r\n  \"taxPrice\": 21,\r\n  \"totalPrice\": 161,\r\n  \"user\": \"65618a21258b171c6731cfad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/orders"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "totalProduct",
			"value": "0",
			"type": "string"
		},
		{
			"key": "productID",
			"value": "",
			"type": "string"
		},
		{
			"key": "productName",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderID",
			"value": "",
			"type": "string"
		},
		{
			"key": "resetPassToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "userPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentPage",
			"value": "0",
			"type": "string"
		}
	]
}